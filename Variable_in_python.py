# -*- coding: utf-8 -*-
"""Variable in Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xaxw7klf60ou3Fg0lpOZu6aXthFqfRyp

# **Variables are containers for storing data values.**
"""

# Dynamic typing : No need to declare data type of variable

myvar = "hello"
my_var = "hello"
_my_var = "hello"
myVar = "hello"
MYVAR = "hello"
myvar2 = "hello"

print(my_var)
print(_my_var)
print(myVar)
print(MYVAR)
print(myvar2)

2myvar = "John"
my-var = "John"
my var = "John"

name = 'Hello'

name

x =5
y = "hello world"

print(x)
print(y)

# No veriable declaration in python

x = 12.5
print(x)

y = 2+1j
print(y)

a = True
print(a)

# 2 Static binding : need to declare datatype in veriable

# Multiple verviable Declaration

a= 5; b= 10; c=15
print(a)
print(b)
print(c)

a,b,c = 2,5,8
print(a)
print(b)
print(c)

a=b=c = 5
print(a)
print(b)
print(c)

import keyword
kw =keyword.kwlist
kw

print(len(kw))

fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z)

x = "Python"
y = "is"
z = "awesome"
print(x, y, z)

x = "Python "
y = "is "
z = "awesome"
print(x + y + z)

a = 5
b = 10
print(a + b)

x ="global" # Global variable
def hello():
  print("x inside funcation:", x)
hello()
print("X is out side Funcation:", x)

# Local variable
def hello():
  x ="global" # Local variable
  print(x)
hello()
print()
print(x)











